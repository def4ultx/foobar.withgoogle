class Graph:
    def __init__(self,banana_list):
        banana_list.sort(reverse=True)
        self.list_len = len(banana_list)
        self.graph = list([0]*self.list_len for i in xrange(self.list_len))
        for i in xrange(self.list_len):
            for j in xrange(self.list_len):
                if i < j: 
                    self.graph[i][j] = self.dead_lock(banana_list[i], banana_list[j])
                    self.graph[j][i] = self.graph[i][j]  
        # print(self.graph)
        
        # print("--", banana_list)
        # for i in range(len(self.graph)):
        #     print(banana_list[i], self.graph[i])

    def gcd(self, x, y):
       while(y):
           x, y = y, x % y
       return x

    def dead_lock(self, x,y):
        if x == y:
            return 0

        l = self.gcd(x,y)

        if (x+y) % 2 == 1:
            return 1

        x,y = x/l,y/l
        x,y = max(x,y), min(x,y)    
        return self.dead_lock(x-y,2*y)
 
    # A DFS based recursive function that returns true if a
    # matching for vertex u is possible
    def bpm(self, u, matchR, seen):
        for v in range(self.list_len):
            if self.graph[u][v] and seen[v] == False:
                seen[v] = True # Mark v as visited
 
                if matchR[v] == -1 or self.bpm(matchR[v], matchR, seen):
                    matchR[v] = u
                    return True
        return False
 
    # Returns maximum number of matching 
    def maxGaurdPair(self):
        matchR = [-1] * self.list_len
        result = 0 # Count of graud match
        for i in range(self.list_len):
            seen = [False] * self.list_len
            if self.bpm(i, matchR, seen):
                result += 1
        return self.list_len- 2*(result/2)


def answer(l):
    print(Graph(l).maxGaurdPair())
    # return Graph(l).maxGaurdPair()

# print("xxxxxxxxxxxxxxxx")
# print(answer([1, 1]))
# print("xxxxxxxxxxxxxxxx")
# print(answer([1, 3, 7, 13, 19, 21]))
# print("xxxxxxxxxxxxxxxx")
# print(answer([79, 32, 110, 85, 436, 980, 1, 12, 342, 7895]))
# print(answer([1073741723,1073741724,1073741725,1073741726,1073741727,1073741728,1073741729,1073741730,1073741731,1073741732,1073741733,1073741734,1073741735,1073741736,1073741737,1073741738,1073741739,1073741740,1073741741,1073741742,1073741743,1073741744,1073741745,1073741746,1073741747,1073741748,1073741749,1073741750,1073741751,1073741752,1073741753,1073741754,1073741755,1073741756,1073741757,1073741758,1073741759,1073741760,1073741761,1073741762,1073741763,1073741764,1073741765,1073741766,1073741767,1073741768,1073741769,1073741770,1073741771,1073741772,1073741773,1073741774,1073741775,1073741776,1073741777,1073741778,1073741779,1073741780,1073741781,1073741782,1073741783,1073741784,1073741785,1073741786,1073741787,1073741788,1073741789,1073741790,1073741791,1073741792,1073741793,1073741794,1073741795,1073741796,1073741797,1073741798,1073741799,1073741800,1073741801,1073741802,1073741803,1073741804,1073741805,1073741806,1073741807,1073741808,1073741809,1073741810,1073741811,1073741812,1073741813,1073741814,1073741815,1073741816,1073741817,1073741818,1073741819,1073741820,1073741821,1073741822]))

answer([1, 7, 3, 21, 13, 19])
answer([1, 1])
answer([24, 22, 21, 23])
answer([24, 22, 21])
answer([1, 7, 3, 21, 13, 19, 1, 7, 3, 21, 13, 19, 1, 1, 7, 3, 21, 13, 19, 1, 7, 3, 21, 13, 19, 1, 123])
answer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])
answer([1073741723,1073741724,1073741725,1073741726,1073741727,1073741728,1073741729,1073741730,1073741731,1073741732,1073741733,1073741734,1073741735,1073741736,1073741737,1073741738,1073741739,1073741740,1073741741,1073741742,1073741743,1073741744,1073741745,1073741746,1073741747,1073741748,1073741749,1073741750,1073741751,1073741752,1073741753,1073741754,1073741755,1073741756,1073741757,1073741758,1073741759,1073741760,1073741761,1073741762,1073741763,1073741764,1073741765,1073741766,1073741767,1073741768,1073741769,1073741770,1073741771,1073741772,1073741773,1073741774,1073741775,1073741776,1073741777,1073741778,1073741779,1073741780,1073741781,1073741782,1073741783,1073741784,1073741785,1073741786,1073741787,1073741788,1073741789,1073741790,1073741791,1073741792,1073741793,1073741794,1073741795,1073741796,1073741797,1073741798,1073741799,1073741800,1073741801,1073741802,1073741803,1073741804,1073741805,1073741806,1073741807,1073741808,1073741809,1073741810,1073741811,1073741812,1073741813,1073741814,1073741815,1073741816,1073741817,1073741818,1073741819,1073741820,1073741821,1073741822])
